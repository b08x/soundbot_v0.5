---

- name: disable logging
  command: "mysql --defaults-file=/root/.my.cnf -u root -NBe 'SET GLOBAL slow_query_log=0; SET GLOBAL general_log=0;'"

- name: disable read_only on master
  command: "mysql --defaults-file=/root/.my.cnf -NBe 'SET GLOBAL read_only=0;'"
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')

- name: copy sql file from cfgmgmtbot to mysqlbot01(master)
  copy: >
    src=/home/opsadmin/db_imports/boiler-db-newest.sql
    dest=/tmp/boiler-db-newest.sql
  delegate_to: "{{ mysql_replication_master }}"
  when: >
    (mysql_replication_role == 'master')
    and mysql_replication_user
    and (mysql_replication_master != '')

- name: import existing sql file
  mysql_db:
    state: import
    name: all
    target: /tmp/boiler-db-newest.sql
  delegate_to: "{{ mysql_replication_master }}"
  when: >
    (mysql_replication_role == 'master')
    and mysql_replication_user
    and (mysql_replication_master != '')

- name: run mysql_update on master
  command: "mysql_upgrade --defaults-file=/root/.my.cnf --write-binlog -v -S /var/lib/mysql/mysql.sock -T --force"
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')

- name: restart service on master
  service: "name={{ mysql_daemon }} state=restarted"
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')

- name: Ensure replication user exists on master
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE') }}"
    state: present
    sql_log_bin: yes
  when: >
    (mysql_replication_role == 'master')
    and mysql_replication_user
    and (mysql_replication_master != '')

- name: Ensure backup user exists
  mysql_user:
    name: "{{ mysql_xtrabackup_user.name }}"
    host: "{{ mysql_xtrabackup_user.host | default('%') }}"
    password: "{{ mysql_xtrabackup_user.password }}"
    priv: "{{ mysql_xtrabackup_user.priv | default('*.*:RELOAD,LOCK TABLES,REPLICATION CLIENT') }}"
    state: present
    sql_log_bin: yes
  when: >
    (mysql_replication_role == 'master')
    and mysql_xtrabackup_user
    and (mysql_replication_master != '')

- name: lock tables
  command: "mysql --defaults-file=/root/.my.cnf -NBe 'flush tables with read lock;'"
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')

- name: take sql dump of master to copy to slave
  mysql_db:
    state: dump
    name: all
    master_data: 2
    target: /tmp/masterdatabase.sql
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')

#TODO: fix this; somehow the mysql host runs out of memory doing this...
# fatal: [mysqlbot01-stag -> mysqlbot01-stag.facilitidev.com]: FAILED! => {"changed": false, "failed": true, "module_stderr": "", "module_stdout": "Traceback (most recent call last):\r\n  File \"/tmp/ansible_R_8L23/ansible_module_slurp.py\", line 78, in <module>\r\n    main()\r\n  File \"/tmp/ansible_R_8L23/ansible_module_slurp.py\", line 70, in main\r\n    data = base64.b64encode(open(source, 'rb').read())\r\n  File \"/usr/lib64/python2.7/base64.py\", line 53, in b64encode\r\n    encoded = binascii.b2a_base64(s)[:-1]\r\nMemoryError\r\n", "msg": "MODULE FAILURE", "parsed": false}
# An exception occurred during task execution. To see the full traceback, use -vvv. The error was: MemoryError
# note, manual rsync works just fine...
# - name: fetch masterdatabase.sql from master
#   fetch: src=/tmp/masterdatabase.sql dest=/home/opsadmin/db_imports/masterdatabase.sql
#   delegate_to: "{{ mysql_replication_master }}"

- name: re-enable logging on master
  command: "mysql --defaults-file=/root/.my.cnf -u root -NBe 'SET GLOBAL slow_query_log=1; SET GLOBAL general_log=0;'"
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')  

- name: fetch masterdatabase.sql from master
  local_action: command rsync -aP mysqlbot01-stag:/tmp/masterdatabase.sql /home/opsadmin/db_imports/
  become: false
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')

- name: copy masterdatabase.sql to slave
  copy: >
    src=/home/opsadmin/db_imports/masterdatabase.sql
    dest=/tmp/masterdatabase.sql
  when: >
    mysql_replication_role == 'slave'
    and (mysql_replication_master != '')

- name: import masterdatabase.sql
  mysql_db:
    state: import
    name: all
    target: /tmp/masterdatabase.sql
  when: >
    mysql_replication_role == 'slave'
    and (mysql_replication_master != '')

- name: restart service on slave
  service: "name={{ mysql_daemon }} state=restarted"
  when: >
    mysql_replication_role == 'slave'
    and (mysql_replication_master != '')

- name: unlock tables
  command: "mysql --defaults-file=/root/.my.cnf -NBe 'unlock tables;'"
  when: >
    mysql_replication_role == 'master'
    and (mysql_replication_master != '')

- name: Check slave replication status
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: >
    mysql_replication_role == 'slave'
    and (mysql_replication_master != '')

- name: Check master replication status
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when: >
    slave|failed
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

#Neither the MASTER_LOG_FILE option nor the MASTER_LOG_POS
#option may be used with MASTER_AUTO_POSITION set equal to 1.
#Attempting to do so causes the CHANGE MASTER TO statement to
#fail with an error.

#note; MASTER_AUTO_POSITION doesn't work with mariadb10
#TODO: edit module to include paramater for MASTER_USE_GTID = current_pos
# https://mariadb.com/kb/en/mariadb/gtid/ 
# Using global transaction IDs

- name: Configure replication on the slave
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_port: 3306
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
    master_use_gtid: True
    master_connect_retry: 10
  ignore_errors: True
  when: >
    slave|failed
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
    and mysql_replication_user

- name: Start replication
  mysql_replication: mode=startslave
  when: >
    slave|failed
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

# wait a while for replication to catch up
# then drop/add users
# then renable logging on slave
# then add iptables rule to master
# remove /root/.my.cnf after install
